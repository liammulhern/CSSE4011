# ┌────────────────────────────────────────────────────────────────────────────┐
# │ Base: install OS deps, create user, install Python deps via uv            │
# └────────────────────────────────────────────────────────────────────────────┘
FROM python:3.11-slim AS base
LABEL org.opencontainers.image.authors="liam@pathledger.live" \
      org.opencontainers.image.licenses="MIT"

# Install build & runtime deps
RUN apt-get update && \
    apt-get install -y --no-install-recommends build-essential libpq-dev curl && \
    rm -rf /var/lib/apt/lists/*

# Install uv (PEP 621) and deps
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# Create non-root user
RUN useradd --create-home appuser
WORKDIR /home/appuser/pathledger-backend

# ┌────────────────────────────────────────────────────────────────────────────┐
# │ Dev: debug server                                                       │
# └────────────────────────────────────────────────────────────────────────────┘
FROM base AS dev
EXPOSE 8000 5678

WORKDIR /home/appuser/pathledger-backend

USER appuser

CMD ["uv", "run", "python", "-m", "debugpy", "--listen", "0.0.0.0:5678", \
     "manage.py", "runserver", "0.0.0.0:8000"]

# ┌────────────────────────────────────────────────────────────────────────────┐
# │ Prod: copy code, collect static, run migrations, then Gunicorn           │
# └────────────────────────────────────────────────────────────────────────────┘
FROM base AS prod
LABEL org.opencontainers.image.authors="liam@your.org" \
      org.opencontainers.image.version="1.0.0"

WORKDIR /home/appuser/pathledger-backend

# Copy source & ensure appuser owns files
COPY --chown=appuser:appuser . .

COPY docker-entrypoint.sh ./
RUN chmod +x docker-entrypoint.sh

RUN mkdir -p /home/appuser/pathledger-backend/staticfiles \
    && chown -R appuser:appuser /home/appuser/pathledger-backend/staticfiles

COPY pyproject.toml uv.lock* ./
RUN uv sync --locked

# Switch to non-root
USER appuser

EXPOSE 8000

# Healthcheck against a simple endpoint (you can add /healthz/ in Django)
# HEALTHCHECK --interval=30s --timeout=5s \
#   CMD curl --fail http://localhost:8000/healthz/ || exit 1

# Entrypoint for migrations & starting app
ENTRYPOINT ["./docker-entrypoint.sh"]
CMD ["uv", "run", "gunicorn", \
     "supplychain_dashboard.wsgi:application", \
     "--bind", "0.0.0.0:8000", \
     "--workers", "3"]

